"""Starlark representation of locked requirements.

@generated by rules_python pip_parse repository rule
from @//third_party:requirements.txt
"""

load("@rules_python//python:pip.bzl", "pip_utils")
load("@rules_python//python/pip_install:pip_repository.bzl", "group_library", "whl_library")

all_requirements = ["@third_party//absl_py:pkg", "@third_party//cachetools:pkg", "@third_party//certifi:pkg", "@third_party//chardet:pkg", "@third_party//charset_normalizer:pkg", "@third_party//cython:pkg", "@third_party//funcsigs:pkg", "@third_party//futures:pkg", "@third_party//gitdb:pkg", "@third_party//gitdb2:pkg", "@third_party//gitpython:pkg", "@third_party//google_api_core:pkg", "@third_party//google_auth:pkg", "@third_party//google_cloud_bigquery:pkg", "@third_party//google_cloud_core:pkg", "@third_party//google_cloud_storage:pkg", "@third_party//google_crc32c:pkg", "@third_party//google_resumable_media:pkg", "@third_party//googleapis_common_protos:pkg", "@third_party//grpcio:pkg", "@third_party//grpcio_status:pkg", "@third_party//idna:pkg", "@third_party//mock:pkg", "@third_party//numpy:pkg", "@third_party//packaging:pkg", "@third_party//pbr:pkg", "@third_party//proto_plus:pkg", "@third_party//protobuf:pkg", "@third_party//psutil:pkg", "@third_party//pyasn1:pkg", "@third_party//pyasn1_modules:pkg", "@third_party//python_dateutil:pkg", "@third_party//pytz:pkg", "@third_party//pyyaml:pkg", "@third_party//requests:pkg", "@third_party//rsa:pkg", "@third_party//scipy:pkg", "@third_party//six:pkg", "@third_party//smmap:pkg", "@third_party//urllib3:pkg"]

all_whl_requirements_by_package = {"absl_py": "@third_party//absl_py:whl", "cachetools": "@third_party//cachetools:whl", "certifi": "@third_party//certifi:whl", "chardet": "@third_party//chardet:whl", "charset_normalizer": "@third_party//charset_normalizer:whl", "cython": "@third_party//cython:whl", "funcsigs": "@third_party//funcsigs:whl", "futures": "@third_party//futures:whl", "gitdb": "@third_party//gitdb:whl", "gitdb2": "@third_party//gitdb2:whl", "gitpython": "@third_party//gitpython:whl", "google_api_core": "@third_party//google_api_core:whl", "google_auth": "@third_party//google_auth:whl", "google_cloud_bigquery": "@third_party//google_cloud_bigquery:whl", "google_cloud_core": "@third_party//google_cloud_core:whl", "google_cloud_storage": "@third_party//google_cloud_storage:whl", "google_crc32c": "@third_party//google_crc32c:whl", "google_resumable_media": "@third_party//google_resumable_media:whl", "googleapis_common_protos": "@third_party//googleapis_common_protos:whl", "grpcio": "@third_party//grpcio:whl", "grpcio_status": "@third_party//grpcio_status:whl", "idna": "@third_party//idna:whl", "mock": "@third_party//mock:whl", "numpy": "@third_party//numpy:whl", "packaging": "@third_party//packaging:whl", "pbr": "@third_party//pbr:whl", "proto_plus": "@third_party//proto_plus:whl", "protobuf": "@third_party//protobuf:whl", "psutil": "@third_party//psutil:whl", "pyasn1": "@third_party//pyasn1:whl", "pyasn1_modules": "@third_party//pyasn1_modules:whl", "python_dateutil": "@third_party//python_dateutil:whl", "pytz": "@third_party//pytz:whl", "pyyaml": "@third_party//pyyaml:whl", "requests": "@third_party//requests:whl", "rsa": "@third_party//rsa:whl", "scipy": "@third_party//scipy:whl", "six": "@third_party//six:whl", "smmap": "@third_party//smmap:whl", "urllib3": "@third_party//urllib3:whl"}

all_whl_requirements = all_whl_requirements_by_package.values()

all_data_requirements = ["@third_party//absl_py:data", "@third_party//cachetools:data", "@third_party//certifi:data", "@third_party//chardet:data", "@third_party//charset_normalizer:data", "@third_party//cython:data", "@third_party//funcsigs:data", "@third_party//futures:data", "@third_party//gitdb:data", "@third_party//gitdb2:data", "@third_party//gitpython:data", "@third_party//google_api_core:data", "@third_party//google_auth:data", "@third_party//google_cloud_bigquery:data", "@third_party//google_cloud_core:data", "@third_party//google_cloud_storage:data", "@third_party//google_crc32c:data", "@third_party//google_resumable_media:data", "@third_party//googleapis_common_protos:data", "@third_party//grpcio:data", "@third_party//grpcio_status:data", "@third_party//idna:data", "@third_party//mock:data", "@third_party//numpy:data", "@third_party//packaging:data", "@third_party//pbr:data", "@third_party//proto_plus:data", "@third_party//protobuf:data", "@third_party//psutil:data", "@third_party//pyasn1:data", "@third_party//pyasn1_modules:data", "@third_party//python_dateutil:data", "@third_party//pytz:data", "@third_party//pyyaml:data", "@third_party//requests:data", "@third_party//rsa:data", "@third_party//scipy:data", "@third_party//six:data", "@third_party//smmap:data", "@third_party//urllib3:data"]

_packages = [("third_party_absl_py", "absl-py==2.0.0"), ("third_party_cachetools", "cachetools==5.3.1"), ("third_party_certifi", "certifi==2023.7.22"), ("third_party_chardet", "chardet==5.2.0"), ("third_party_charset_normalizer", "charset-normalizer==3.3.2"), ("third_party_cython", "cython==3.0.3"), ("third_party_funcsigs", "funcsigs==1.0.2"), ("third_party_futures", "futures==3.1.1"), ("third_party_gitdb", "gitdb==4.0.11"), ("third_party_gitdb2", "gitdb2==4.0.2"), ("third_party_gitpython", "gitpython==3.1.41"), ("third_party_google_api_core", "google-api-core[grpc]==2.12.0"), ("third_party_google_auth", "google-auth==2.23.3"), ("third_party_google_cloud_bigquery", "google-cloud-bigquery==3.12.0"), ("third_party_google_cloud_core", "google-cloud-core==2.3.3"), ("third_party_google_cloud_storage", "google-cloud-storage==2.12.0"), ("third_party_google_crc32c", "google-crc32c==1.5.0"), ("third_party_google_resumable_media", "google-resumable-media==2.6.0"), ("third_party_googleapis_common_protos", "googleapis-common-protos==1.61.0"), ("third_party_grpcio", "grpcio==1.62.1"), ("third_party_grpcio_status", "grpcio-status==1.62.1"), ("third_party_idna", "idna==3.4"), ("third_party_mock", "mock==5.1.0"), ("third_party_numpy", "numpy==1.26.1"), ("third_party_packaging", "packaging==24.0"), ("third_party_pbr", "pbr==5.1.3"), ("third_party_proto_plus", "proto-plus==1.23.0"), ("third_party_protobuf", "protobuf==4.24.4"), ("third_party_psutil", "psutil==5.9.6"), ("third_party_pyasn1", "pyasn1==0.5.0"), ("third_party_pyasn1_modules", "pyasn1-modules==0.3.0"), ("third_party_python_dateutil", "python-dateutil==2.9.0.post0"), ("third_party_pytz", "pytz==2018.9"), ("third_party_pyyaml", "pyyaml==6.0.1"), ("third_party_requests", "requests==2.31.0"), ("third_party_rsa", "rsa==4.9"), ("third_party_scipy", "scipy==1.11.3"), ("third_party_six", "six==1.16.0"), ("third_party_smmap", "smmap==5.0.1"), ("third_party_urllib3", "urllib3==2.0.7")]
_config = {"download_only": False, "enable_implicit_namespace_pkgs": False, "environment": {}, "envsubst": ["PIP_RETRIES"], "extra_pip_args": ["--retries=${PIP_RETRIES:-5}"], "isolated": True, "pip_data_exclude": [], "python_interpreter": "python3", "python_interpreter_target": "@python3_10_aarch64-apple-darwin//:bin/python3", "quiet": True, "repo": "third_party", "repo_prefix": "third_party_", "timeout": 600}
_annotations = {}

def requirement(name):
    return "@third_party//{}:{}".format(pip_utils.normalize_name(name), "pkg")

def whl_requirement(name):
    return "@third_party//{}:{}".format(pip_utils.normalize_name(name), "whl")

def data_requirement(name):
    return "@third_party//{}:{}".format(pip_utils.normalize_name(name), "data")

def dist_info_requirement(name):
    return "@third_party//{}:{}".format(pip_utils.normalize_name(name), "dist_info")

def entry_point(pkg, script = None):
    if not script:
        script = pkg
    return "@third_party_" + pip_utils.normalize_name(pkg) + "//:rules_python_wheel_entry_point_" + script

def _get_annotation(requirement):
    # This expects to parse `setuptools==58.2.0     --hash=sha256:2551203ae6955b9876741a26ab3e767bb3242dafe86a32a749ea0d78b6792f11`
    # down to `setuptools`.
    name = requirement.split(" ")[0].split("=")[0].split("[")[0]
    return _annotations.get(name)

def install_deps(**whl_library_kwargs):
    """Repository rule macro. Install dependencies from `pip_parse`.

    Args:
       **whl_library_kwargs: Additional arguments which will flow to underlying
         `whl_library` calls. See pip_repository.bzl for details.
    """

    # Set up the requirement groups
    all_requirement_groups = {}

    requirement_group_mapping = {
        requirement: group_name
        for group_name, group_requirements in all_requirement_groups.items()
        for requirement in group_requirements
    }

    group_repo = "third_party__groups"
    group_library(
        name = group_repo,
        repo_prefix = "third_party_",
        groups = all_requirement_groups,
    )

    # Install wheels which may be participants in a group
    whl_config = dict(_config)
    whl_config.update(whl_library_kwargs)

    for name, requirement in _packages:
        group_name = requirement_group_mapping.get(name.replace("third_party_", ""))
        group_deps = all_requirement_groups.get(group_name, [])

        whl_library(
            name = name,
            requirement = requirement,
            group_name = group_name,
            group_deps = group_deps,
            annotation = _get_annotation(requirement),
            **whl_config
        )
